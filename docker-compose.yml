version: '3.2'

services:
  db:
    # In production, you may want to use a managed database service
    image: mysql:5.7
    environment:
      - MYSQL_ROOT_PASSWORD=!ChangeMe!
      - MYSQL_DATABASE=app
      - MYSQL_USER=docker
      - MYSQL_PASSWORD=!ChangeMe!
      # - POSTGRES_DB=app
      # - POSTGRES_USER=vincentig
      # You should definitely change the password in production
      # - POSTGRES_PASSWORD=!ChangeMe!
    volumes:
      - db-data:/var/lib/mysql:rw
      # You may use a bind-mounted host directory instead, so that it is harder to accidentally remove the volume and lose all your data!
      # - ./docker/db/data:/var/lib/mysql:rw
    ports:
      - "3306:3306"
    command: --disable-partition-engine-check


  php:
    #image: ${CONTAINER_REGISTRY_BASE}/php
    build:
      context: ./docker
      # cache_from:
        # - ${CONTAINER_REGISTRY_BASE}/php
    depends_on:
      - db
    env_file:
      - .env
    # Comment out these volumes in production
    volumes:
      - .:/srv/app:rw,cached
      # If you develop on Linux, uncomment the following line to use a bind-mounted host directory instead
      # - ./var:/srv/app/var:rw

  app:
    #image: ${CONTAINER_REGISTRY_BASE}/nginx
    build:
      context: ./docker
      dockerfile: Dockerfile.nginx
      # cache_from:
      #   - ${CONTAINER_REGISTRY_BASE}/nginx
    depends_on:
      - php
    volumes:
      - .web:/srv/app/web:ro
    ports:
      - "80:80"

  cache-proxy:
    #image: ${CONTAINER_REGISTRY_BASE}/varnish
    build:
      context: ./docker
      dockerfile: Dockerfile.varnish
      # cache_from:
      #   - ${CONTAINER_REGISTRY_BASE}/varnish
    depends_on:
      - app
    # Comment out this volume in production
    volumes:
      - ./docker/varnish/conf:/etc/varnish:ro
    ports:
      - "81:80"

  h2-proxy:
     #Don't use this proxy in prod
    build:
      context: ./docker/h2-proxy
    depends_on:
      - app
      - cache-proxy
    ports:
      - "443:443"
      - "444:444"

volumes:
  db-data: {}
